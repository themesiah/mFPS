#version 430
#extension GL_NV_uniform_buffer_std430_layout : enable
out vec4 frag_color;

uniform bool use_albedo_texture;
uniform bool use_tint;

in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;
in vec3 WorldSpacePos;

uniform vec4 tint;
uniform sampler2D albedo;

struct directional_light
{
	vec4 dir;
	vec4 color_intensity;
};

struct ambient_light
{
	vec4 color_intensity;
};

struct point_light
{
	vec4 color_intensity;
	vec4 position_range;
};

layout(std430, binding = 3) buffer lightLayout
{
	directional_light[] dir_light;
};

layout(std430, binding = 4) buffer ambientLightLayout
{
	ambient_light[] amb_light;
};

layout(std430, binding = 5) buffer pointLightLayout
{
	point_light[] p_light;
};

vec3 get_light_influence(vec3 norm)
{
	vec3 color = vec3(0,0,0);
	for(int i = 0; i < amb_light.length(); ++i)
	{
		color += amb_light[i].color_intensity.xyz * amb_light[i].color_intensity.w;
	}

	for(int i = 0; i < dir_light.length(); ++i)
	{
		vec3 lightDir = normalize(dir_light[i].dir.xyz);
		float diff = max(dot(norm, lightDir), 0.0) * dir_light[i].color_intensity.w;
		color += dir_light[i].color_intensity.xyz * diff;
	}

	for(int i = 0; i < p_light.length(); ++i)
	{
		vec3 lightPos = p_light[i].position_range.xyz;
		float distance = distance(WorldSpacePos, lightPos);
		if (p_light[i].position_range.w > distance)
		{
			vec3 lightDir = normalize(lightPos - WorldSpacePos);
			float t = 1 - (distance / p_light[i].position_range.w);
			t = t * max(dot(norm, lightDir), 0.0);
			color += mix(vec3(0,0,0), p_light[i].color_intensity.xyz, t) * p_light[i].color_intensity.w;
		}
	}

	return color;
}

void main() {
	frag_color = vec4(1.0, 1.0, 1.0, 1.0);
	if (use_tint == true)
	{
		frag_color = frag_color * tint;
	}
	if (use_albedo_texture == true)
	{
		frag_color = frag_color * texture(albedo, TexCoord);
	}
	
	vec3 norm = normalize(Normal);
	
	// Specular light
	frag_color = frag_color * vec4(get_light_influence(norm), 1.0);
	
	// frag_color = vec4(oNormal.x, oNormal.y, oNormal.z, 1.0); // Uncomment to test normals
}