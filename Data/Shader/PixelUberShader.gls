#version 430
#extension GL_NV_uniform_buffer_std430_layout : enable
out vec4 frag_color;

uniform bool use_albedo_texture;
uniform bool use_tint;

in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;

uniform vec4 tint;
uniform sampler2D albedo;

layout(std430, binding = 3) buffer lightLayout
{
	vec4 direction;
	vec4 color_intensity;
    //float data_SSBO[];
};

layout(std430, binding = 4) buffer ambientLightLayout
{
	vec4 ambient_color_intensity;
};

void main() {
	frag_color = vec4(1.0, 1.0, 1.0, 1.0);
	if (use_tint == true)
	{
		frag_color = frag_color * tint;
	}
	if (use_albedo_texture == true)
	{
		frag_color = frag_color * texture(albedo, TexCoord);
	}
	
	vec3 norm = normalize(Normal);
	// Diffuse light
	vec3 lightDir = normalize(vec3(direction.x, direction.y, direction.z));
	float diff = max(dot(norm, lightDir), 0.0) * color_intensity.w;
	vec4 colorDiff = vec4(color_intensity.xyz * diff, 1.0) + vec4(ambient_color_intensity.xyz * ambient_color_intensity.w, 1.0);
	
	// Specular light
	frag_color = frag_color * colorDiff;
	
	// frag_color = vec4(oNormal.x, oNormal.y, oNormal.z, 1.0); // Uncomment to test normals
}